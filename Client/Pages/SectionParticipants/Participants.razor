@page "/participants"
@layout SubLayoutParticipants
@inject HttpClient Http
@inject AllergenService AllergenService
@inject ClientModeService ModeService

<PageTitle> Účastníci </PageTitle>

<Modal @ref="editParticipantModal"/>
<Modal @ref="deleteParticipantModal"/>
<Modal @ref="addParticipantModal"/>

@if (@ModeService.CurrentMode == ClientMode.BugReporting)
{
    <div class="overlay"> </div>
}

@if (sortedParticipants == null)
{
    <p> Načítám účastníky... </p>
}
else
{

    <div class="div-table-container">
        <div class="div-table-container-header"> 
            <div> Účastníci </div> 
            <div class="button-right-container"> <button @onclick="ShowAddParticipantModal" class="btn btn-primary"> Přidat účastníka </button> </div>
            
        </div>
        <div class="div-table">
            <div class="div-table-header">
                <div style="flex:@colWidths[0]" class="div-table-h-col"> <button id="@sorterNumToId[0]" class="clickable-header @GetClassFromMode(sorterNumToId[0])" @onclick="() => HandleSorterClick(0)" > Id @sortingManager.HeaderArrows[0] </button> </div>
                <div style="flex:@colWidths[1]" class="div-table-h-col"> <button id="@sorterNumToId[1]" class="clickable-header @GetClassFromMode(sorterNumToId[1])" @onclick="() => HandleSorterClick(1)" > Jméno @sortingManager.HeaderArrows[1] </button> </div>
                <div style="flex:@colWidths[2]" class="div-table-h-col"> <button id="@sorterNumToId[2]" class="clickable-header @GetClassFromMode(sorterNumToId[2])" @onclick="() => HandleSorterClick(2)" > Příjmení @sortingManager.HeaderArrows[2] </button> </div>
                <div style="flex:@colWidths[3]" class="div-table-h-col justify-center-col"> <button id="@sorterNumToId[3]" class='clickable-header @GetClassFromMode(sorterNumToId[3])' @onclick="() => HandleSorterClick(3)" > Věk @sortingManager.HeaderArrows[3] </button> </div>
                <div style="flex:@colWidths[4]" class="div-table-h-col justify-center-col"> <button id="@sorterNumToId[4]" class="clickable-header @GetClassFromMode(sorterNumToId[4])" @onclick="() => HandleSorterClick(4)" > Telefonní číslo @sortingManager.HeaderArrows[4] </button> </div>
                <div style="flex:@colWidths[5]" class="div-table-h-col justify-center-col"> <button id="@sorterNumToId[5]" class="clickable-header @GetClassFromMode(sorterNumToId[5])" @onclick="() => HandleSorterClick(5)" > Rodné číslo @sortingManager.HeaderArrows[5] </button> </div>
                <div style="flex:@colWidths[6]" class="button-right-container"> </div>
            </div>
            <div class="div-table-header">
                <div style="flex:@colWidths[0]" class="div-table-h-col">  <input class="id-search-box" @bind="idFilter.FilterText" @bind:event="oninput" placeholder="..." type="text"/> </div>
                <div style="flex:@colWidths[1]" class="div-table-h-col"> <input class="name-search-box" @bind="firstNameFilter.FilterText" @bind:event="oninput" placeholder="hledat..." type="text"/> </div>
                <div style="flex:@colWidths[2]" class="div-table-h-col"> <input class="name-search-box" @bind="lastNameFilter.FilterText" @bind:event="oninput" placeholder="hledat..." type="text"/> </div>
                <div style="flex:@colWidths[3]" class="div-table-h-col">
                    <Dropdown Color="DropdownColor.Secondary" Direction="DropdownDirection.Dropup" AutoCloseBehavior="DropdownAutoCloseBehavior.Outside" Size="DropdownSize.Small">
                        <DropdownToggleButton Class="filter-button"> Filtrovat </DropdownToggleButton>
                        <DropdownMenu Class="px-3" Style="width:150px;">
                            <div>
                                Min: 
                                <input type="range" @bind="ageBoundFilter.CurrentMin" @bind:event="oninput" min="@ParticipantFormData.LowestAge" max="@ParticipantFormData.HighestAge" />
                                <input style="width:130px" type="number" @bind="ageBoundFilter.CurrentMin" @bind:event="oninput" />
                            </div>
                            <br>
                            <div>
                                Max: 
                                <input type="range" @bind="ageBoundFilter.CurrentMax" @bind:event="oninput" min="@ParticipantFormData.LowestAge" max="@ParticipantFormData.HighestAge" />
                                <input style="width:130px" type="number" @bind="ageBoundFilter.CurrentMax" @bind:event="oninput" />
                            </div>
                        </DropdownMenu>
                    </Dropdown>
                </div>
                <div style="flex:@colWidths[4]" class="div-table-h-col justify-center-col"> <input class="name-search-box" @bind="phoneNumberFilter.FilterText" @bind:event="oninput" placeholder="hledat..." type="text"/> </div>
                <div style="flex:@colWidths[5]" class="div-table-h-col justify-center-col"> <input class="name-search-box" @bind="birthNumberFilter.FilterText" @bind:event="oninput" placeholder="hledat..." type="text"/> </div>
                
                <div style="flex:@colWidths[6]" class="button-right-container"> 
                    @if (filteringManager != null)
                    {
                        <button style="width:auto" class="btn btn-primary" @onclick="() => filteringManager.ResetFilters()"> Resetovat filtry </button> 
                    }
                </div>
                    
                
                 
            </div>
            <div class="div-table-body">

                @foreach(var participant in sortedParticipants)
                {
                    <div class="div-table-row">
                        <div style="flex:@colWidths[0]"> @participant.Id </div>
                        <div style="flex:@colWidths[1]"> @participant.FirstName </div>
                        <div style="flex:@colWidths[2]"> @participant.LastName </div>
                        <div style="flex:@colWidths[3]" class="justify-center-col"> @participant.Age </div>
                        <div style="flex:@colWidths[4]" class="justify-center-col"> @participant.PhoneNumber </div>
                        <div style="flex:@colWidths[5]" class="justify-center-col"> @participant.BirthNumber </div>
                        <div style="flex:@colWidths[6]" class="button-right-container"> 
                            <button class="btn btn-primary" @onclick="() => ShowEditParticipantModal(participant)" > Upravit </button>
                            <button class="btn btn-primary" @onclick="() => ShowDeleteParticipantModal(participant)" > Odstranit </button>
                        </div>
                    </div>
                }
                
            </div>

        </div>

    </div>
}

@code
{

    /* BUG REPORTING CODE */

    private static string[] sorterNumToId = {"id-sorter","first-name-sorter","last-name-sorter","age-sorter","phone-number-sorter","birth-number-sorter"};
    
    private static Dictionary<string,bool> isElementSelected = new();

    private void InitializeSelectedElementDictionary()
    {
        foreach (var elementId in sorterNumToId)
        {
            isElementSelected[elementId] = false;
        }
    }
    
    private List<string> selectedIds = new();
    private string GetClassFromMode(string elementId)
    {
        if (ModeService.CurrentMode == ClientMode.BugReporting)
        {
            return isElementSelected[elementId] ? "highlighted-selected" : "highlighted";
        }
        return "";
    }

    private void HandleSorterClick(int sorterNum)
    {
        if (ModeService.CurrentMode == ClientMode.Normal)
        {
            sortingManager.HandleSortClick(sorterNum);
        }
        else
        {
            isElementSelected[sorterNumToId[sorterNum]] = !isElementSelected[sorterNumToId[sorterNum]];
        }
    }

    // Stores relative sizes of the table columns (the numbers are used as arguments to the flex css attribute)
    private int[] colWidths = {7,15,15,10,16,15,20};

    // Holds all participants, has to be loaded from api on initialization
    private IEnumerable<ParticipantDto>? participantDtos;

    // Add all filters to the list
    // Get a list of all participants
    protected override async Task OnInitializedAsync()
    {
        ModeService.OnModeChangedEvent += StateHasChanged;
        InitializeSelectedElementDictionary();
        InitializeFilteringManager();
        await LoadParticipants();
    }

    // Is used OnInitializedAsync and also after deleting a participant so we can see the change immediately
    private async Task LoadParticipants()
    {
        participantDtos = await Http.GetFromJsonAsync<List<ParticipantDto>>("api/participants/all");
    }

    // Provides a getter that first filters and then sorts the participants
    private IEnumerable<ParticipantDto>? sortedParticipants
    {
        get 
        {
            if (filteringManager == null || participantDtos == null)
            {
                return null;
            }

            // first filter all participants
            var filteredParticipants = filteringManager.GetFilteredParticipants(participantDtos);

            // then sort them
            return sortingManager.GetSortedParticipants(filteredParticipants);
        }
    }
 
    // Used to filter by age using lower and upper bound
    private NumericBoundFilter<int> ageBoundFilter = new(ParticipantFormData.LowestAge,ParticipantFormData.HighestAge) {FilterKeySelector = p => p.Age};
    private TextFilter idFilter = new() {FilterKeySelector = p => p.Id.ToString()};
    private TextFilter firstNameFilter = new() {FilterKeySelector = p => p.FirstName};
    private TextFilter lastNameFilter = new() {FilterKeySelector = p => p.LastName};
    private TextFilter phoneNumberFilter = new() {FilterKeySelector = p => p.PhoneNumber};
    private TextFilter birthNumberFilter = new() {FilterKeySelector = p => p.BirthNumber};

    private ColumnFilteringManager? filteringManager;

    // Add all filters to the filters list so I can apply them all sequentially
    private void InitializeFilteringManager()
    {
        filteringManager = 
            new ColumnFilteringManager
                (
                    new List<IParticipantFilter>()
                        {
                            idFilter,
                            firstNameFilter,
                            lastNameFilter,
                            ageBoundFilter,
                            phoneNumberFilter,
                            birthNumberFilter
                        }
                );
    }

    // Takes care of sorting the columns according to list of given sorters with key selectors and key comparers
    private ColumnSortingManager sortingManager = 
        new ColumnSortingManager
        (
            new ParticipantSorter<object>[]
            {
                new ParticipantSorter<object>() { KeySelector = participant => participant.Id, KeyComparer = new IntegerSwitchableComparer() },
                new ParticipantSorter<object>() { KeySelector = participant => participant.FirstName, KeyComparer = new StringSwitchableComparer() },
                new ParticipantSorter<object>() { KeySelector = participant => participant.LastName, KeyComparer = new StringSwitchableComparer() },
                new ParticipantSorter<object>() { KeySelector = participant => participant.Age, KeyComparer = new IntegerSwitchableComparer() },
                new ParticipantSorter<object>() { KeySelector = participant => participant.PhoneNumber, KeyComparer = new StringSwitchableComparer() },
                new ParticipantSorter<object>() { KeySelector = participant => participant.BirthNumber, KeyComparer = new StringSwitchableComparer() }
            },
            0
        );


    // Reference used when showing or hiding the AddParticipantModal component
    private Modal addParticipantModal = default!;

    private async Task ShowAddParticipantModal()
    {
        var parameters = new Dictionary<string,object>();
        parameters.Add("CreateParticipant",EventCallback.Factory.Create<ParticipantFormData>(this,RequestCreateParticipant));
        await addParticipantModal.ShowAsync<AddParticipantModal>(title:$"Přidat účastníka",parameters: parameters);
    }

    // Connects to my api and posts the participant that was submitted to the form
    private async Task RequestCreateParticipant(ParticipantFormData participant)
    {
        await Http.PostAsJsonAsync<ParticipantDto>("/api/participants/add",participant.ToParticipantDto(),CancellationToken.None);
        await LoadParticipants();
        await addParticipantModal.HideAsync();
    }


    // Add reference to the editParticipantsModal
    private Modal editParticipantModal = default!;

    // We need to convert the participantDto to the ParticipantFormData (it allows us to do form valiadtion)
    private async Task ShowEditParticipantModal(ParticipantDto participant)
    {
        var parameters = new Dictionary<string,object>();
        var allAllergens = await AllergenService.GetAllergenDtosAsync();
        parameters.Add("Participant",participant.ToParticipantFormData(allAllergens));
        parameters.Add("UpdateParticipant",EventCallback.Factory.Create<ParticipantFormData>(this,RequestParticipantEdit));
        await editParticipantModal.ShowAsync<EditParticipantModal>(title:$"Upravit účastníka {participant.FirstName}",parameters: parameters);
    }

    // Send api request to update the participant
    // Need to convert from ParticipantFormData to ParticipantDto 
    private async Task RequestParticipantEdit(ParticipantFormData participant)
    {
        var participantDto = participant.ToParticipantDto();
        await Http.PostAsJsonAsync<ParticipantDto>($"/api/participants/edit/{participantDto.Id}",participantDto,CancellationToken.None);
        await LoadParticipants();
        await editParticipantModal.HideAsync();
    }

    // Add reference to my modal which I will use to confirm deletion of given participant
    private Modal deleteParticipantModal = default!;

    // Uses the reference to deletion modal to call the ShowAsync method with the component to be shown by the modal modal
    // The parameters are passed to the modal using dictionary with entries in format -> parameter_name : passed_value
    private void ShowDeleteParticipantModal(ParticipantDto participant)
    {
        var parameters = new Dictionary<string,object>();
        parameters.Add("CurrentParticipant",participant);
        parameters.Add("OnDeleteParticipant",EventCallback.Factory.Create<int>(this,RequestParticipantDelete));
        parameters.Add("OnRejectButton",EventCallback.Factory.Create(this,HideDeleteParticipantModal));
        deleteParticipantModal.ShowAsync<DeleteParticipantModal>(title:"Odstranit účastníka",parameters: parameters);
    }

    private async Task HideDeleteParticipantModal()
    {
        await deleteParticipantModal.HideAsync();
    }

    // Sends api request to delete participant with given id
    private async Task RequestParticipantDelete(int id)
    {
        await Http.DeleteAsync($"api/participants/delete/{id}");
        await LoadParticipants();
        await deleteParticipantModal.HideAsync();
    }

}